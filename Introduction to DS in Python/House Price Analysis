import pandas as pd
from pandas import ExcelWriter
from pandas import ExcelFile
import numpy as np
from scipy.stats import ttest_ind
from scipy import stats

# Use this dictionary to map state names to two letter acronyms
states = {'OH': 'Ohio', 'KY': 'Kentucky', 'AS': 'American Samoa', 'NV': 'Nevada', 'WY': 'Wyoming', 'NA': 'National', 'AL': 'Alabama', 'MD': 'Maryland', 'AK': 'Alaska', 'UT': 'Utah', 'OR': 'Oregon', 'MT': 'Montana', 'IL': 'Illinois', 'TN': 'Tennessee', 'DC': 'District of Columbia', 'VT': 'Vermont', 'ID': 'Idaho', 'AR': 'Arkansas', 'ME': 'Maine', 'WA': 'Washington', 'HI': 'Hawaii', 'WI': 'Wisconsin', 'MI': 'Michigan', 'IN': 'Indiana', 'NJ': 'New Jersey', 'AZ': 'Arizona', 'GU': 'Guam', 'MS': 'Mississippi', 'PR': 'Puerto Rico', 'NC': 'North Carolina', 'TX': 'Texas', 'SD': 'South Dakota', 'MP': 'Northern Mariana Islands', 'IA': 'Iowa', 'MO': 'Missouri', 'CT': 'Connecticut', 'WV': 'West Virginia', 'SC': 'South Carolina', 'LA': 'Louisiana', 'KS': 'Kansas', 'NY': 'New York', 'NE': 'Nebraska', 'OK': 'Oklahoma', 'FL': 'Florida', 'CA': 'California', 'CO': 'Colorado', 'PA': 'Pennsylvania', 'DE': 'Delaware', 'NM': 'New Mexico', 'RI': 'Rhode Island', 'MN': 'Minnesota', 'VI': 'Virgin Islands', 'NH': 'New Hampshire', 'MA': 'Massachusetts', 'GA': 'Georgia', 'ND': 'North Dakota', 'VA': 'Virginia'}

# Get a dataframe about university town
def get_list_of_university_towns():
    df = pd.read_csv('university_towns.txt', sep="/", names=['RegionName'])
    df.columns = df.columns.str.replace(' ', '')
    df.insert(0, 'State', df['RegionName'].str.extract('(.*)\[edit\]', expand=False).ffill())
    df['RegionName'] = df['RegionName'].str.replace(r' \(.*', '')
    df = df[~df['RegionName'].str.contains('\[edit\]')].reset_index(drop=True)
    '''Returns a DataFrame of towns and the states they are in from the 
    university_towns.txt list. The format of the DataFrame should be:
    DataFrame( [ ["Michigan", "Ann Arbor"], ["Michigan", "Yipsilanti"] ], 
    columns=["State", "RegionName"]  )
    
    The following cleaning needs to be done:

    1. For "State", removing characters from "[" to the end.
    2. For "RegionName", when applicable, removing every character from " (" to the end.
    3. Depending on how you read the data, you may need to remove newline character '\n'. '''
    
    return df
get_list_of_university_towns()

# Get the recession start quarter
def get_recession_start():
    #read and clean the gdp data
    df = pd.read_excel('gdplev.xls', sheetname='Sheet1',skiprows=5)
    df = df.iloc[214:,4:7].rename(columns={'Unnamed: 4':'YQ',
                                         'GDP in billions of current dollars.1':'GDP in current $',
                                         'GDP in billions of chained 2009 dollars.1':'GDP in 2009 $'}).reset_index(drop=True)
    df['Change'] = df['GDP in 2009 $']-df['GDP in 2009 $'].shift()
    df = df.set_index('YQ')
    #create a new column calculating quarterly change
    test = df['Change']
    index = []
    df.iloc[0]
    #go through each line to find the start of recession
    for j in range(0,len(test)-1):
        if (test[j] < 0) and (test[j+1] < 0) and (test[j+2] < 0):
            index.append(j)

    '''Returns the year and quarter of the recession start time as a 
    string value in a format such as 2005q3'''
    
    return df.iloc[index[0]].name
get_recession_start()

# Get the recession end quarter
def get_recession_end():
    #read and clean the gdp data
    df = pd.read_excel('gdplev.xls', sheetname='Sheet1',skiprows=5)
    df = df.iloc[214:,4:7].rename(columns={'Unnamed: 4':'YQ',
                                         'GDP in billions of current dollars.1':'GDP in current $',
                                         'GDP in billions of chained 2009 dollars.1':'GDP in 2009 $'}).reset_index(drop=True)
    df['Change'] = df['GDP in 2009 $']-df['GDP in 2009 $'].shift()
    df = df.set_index('YQ')
    #create a new column calculating quarterly change
    test = df['Change']
    index = []
    df.iloc[0]
    #go through each line to find the end of recession
    for j in range(0,len(test)-1):
        if (test[j-3] < 0) and (test[j-2] < 0) and (test[j-1] > 0) and (test[j] > 0):
            answer = df.iloc[j].name

    '''Returns the year and quarter of the recession end time as a 
    string value in a format such as 2005q3'''
       
    return answer

get_recession_end()

# Get the recession bottom quarter
def get_recession_bottom():
    #read and clean the gdp data
    df = pd.read_excel('gdplev.xls', sheetname='Sheet1',skiprows=5)
    df = df.iloc[214:,4:7].rename(columns={'Unnamed: 4':'YQ',
                                           'GDP in billions of current dollars.1':'GDP in current $',
                                           'GDP in billions of chained 2009 dollars.1':'GDP in 2009 $'}).reset_index(drop=True)
    df['Change'] = df['GDP in 2009 $']-df['GDP in 2009 $'].shift()
    df = df.set_index('YQ')
    #get the data during recession period
    df1 = df[get_recession_start():get_recession_end()]
    min = df1['GDP in 2009 $'].min()
    df1.loc[df1['GDP in 2009 $'] == min].index[0]
    
    '''Returns the year and quarter of the recession bottom time as a 
    string value in a format such as 2005q3'''
    
    return df1.loc[df1['GDP in 2009 $'] == min].index[0]
get_recession_bottom()

# Get all data to quarter
def convert_housing_data_to_quarters():
    df = pd.read_csv('City_Zhvi_AllHomes.csv')
    df = df.drop(df.iloc[:,3:51],axis = 1)
    df = df.drop(['RegionID'],axis = 1)
    df['State'] = df['State'].map(states)
    df = df.set_index(['State','RegionName'])
    df.columns = pd.to_datetime(df.columns)
    df = df.resample('Q',axis=1).mean()
    df = df.rename(columns=lambda x: str(x.to_period('Q')).lower())
    df.sort_index(inplace=True)
    '''Converts the housing data to quarters and returns it as mean 
    values in a dataframe. This dataframe should be a dataframe with
    columns for 2000q1 through 2016q3, and should have a multi-index
    in the shape of ["State","RegionName"].
    
    Note: Quarters are defined in the assignment description, they are
    not arbitrary three month periods.
    
    The resulting dataframe should have 67 columns, and 10,730 rows.
    '''
    
    return df

convert_housing_data_to_quarters()

# Run T-test to see whether there is price difference between university town and non-university town
def run_ttest():
    hdf = convert_housing_data_to_quarters()
    rec_start=get_recession_start()
    rec_bottom = get_recession_bottom()
    ul = get_list_of_university_towns()
    qrt_bfr_rec_start = hdf.columns[hdf.columns.get_loc(rec_start) -1]
    #hdf['PriceRatio'] = hdf[qrt_bfr_rec_start].div(hdf[rec_bottom])
    hdf['PriceRatio'] = hdf[rec_bottom]-hdf[qrt_bfr_rec_start]
    df = pd.merge(hdf.reset_index(),
                  ul,
                  on = ul.columns.tolist(),
                  indicator = 'Flag',
                  how = 'outer')
    group1 = df[df['Flag']=='both']
    group2 = df[df['Flag']!='both']
    result = stats.ttest_ind(group1['PriceRatio'].dropna(),group2['PriceRatio'].dropna())
    diff = result[1]<0.01
    if group1['PriceRatio'].mean() > group2['PriceRatio'].mean():
        better = 'university town'
    else:
        better = 'non-university town'
    dic = {'different':diff,'p':result[1],'better':better}
    '''First creates new data showing the decline or growth of housing prices
    between the recession start and the recession bottom. Then runs a ttest
    comparing the university town values to the non-university towns values, 
    return whether the alternative hypothesis (that the two groups are the same)
    is true or not as well as the p-value of the confidence. 
    
    Return the tuple (different, p, better) where different=True if the t-test is
    True at a p<0.01 (we reject the null hypothesis), or different=False if 
    otherwise (we cannot reject the null hypothesis). The variable p should
    be equal to the exact p value returned from scipy.stats.ttest_ind(). The
    value for better should be either "university town" or "non-university town"
    depending on which has a lower mean price ratio (which is equivilent to a
    reduced market loss).'''
    
    return tuple(dic.values())

run_ttest()
